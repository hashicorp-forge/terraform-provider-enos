package plugin

import (
	"context"
	"sync"

	"github.com/hashicorp/enos-provider/internal/server/resourcerouter"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
)

type {{.Struct}} struct {
	providerConfig *config
	mu             sync.Mutex
}

var _ resourcerouter.Resource = (*{{.Struct}})(nil)

type {{.State}} struct {
	ID        *tfString
	Transport *embeddedTransportV1
}

var _ State = (*{{.State}})(nil)

func new{{.StructCap}}() *{{.Struct}} {
	return &{{.Struct}}{
		providerConfig: newProviderConfig(),
		mu:             sync.Mutex{},
	}
}

func new{{.StateCap}}() *{{.State}} {
	return &{{.State}}{
		ID: newTfString(),
		Transport: newEmbeddedTransport(),
	}
}

func (r *{{.Struct}}) Name() string {
	return "{{.Name}}"
}

func (r *{{.Struct}}) Schema() *tfprotov6.Schema {
	return new{{.StateCap}}().Schema()
}

func (r *{{.Struct}}) SetProviderConfig(meta tftypes.Value) error {
	r.mu.Lock()
	defer r.mu.Unlock()

	return r.providerConfig.FromTerraform5Value(meta)
}

func (r *{{.Struct}}) GetProviderConfig() (*config, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	return r.providerConfig.Copy()
}

// ValidateResourceConfig is the request Terraform sends when it wants to
// validate the resource's configuration.
func (r *{{.Struct}}) ValidateResourceConfig(ctx context.Context, req tfprotov6.ValidateResourceConfigRequest, res *tfprotov6.ValidateResourceConfigResponse) {
	newState := new{{.StateCap}}()

	// TODO: the transportUtil simply ensures that the state can successfully
	// unmarshal and remarshal. If you need to perform more validation than
	// write a custom validation function.
	transportUtil.ValidateResourceConfig(ctx, newState, req, res)
}

// UpgradeResourceState is the request Terraform sends when it wants to
// upgrade the resource's state to a new version.
//
// Upgrading the resource state generally goes as follows:
//
//   1. Unmarshal the RawState to the corresponding tftypes.Value that matches
//     schema version of the state we're upgrading from.
//   2. Create a new tftypes.Value for the current state and migrate the old
//    values to the new values.
//   3. Upgrade the existing state with the new values and return the marshaled
//    version of the current upgraded state.
//
func (r *{{.Struct}}) UpgradeResourceState(ctx context.Context, req tfprotov6.UpgradeResourceStateRequest, res *tfprotov6.UpgradeResourceStateResponse) {
	newState := new{{.StateCap}}()

	// TODO: the transportUtil currently supports a single version of the
	// the schema. If you're updating you'll need to write your own upgrade
	// function.
	transportUtil.UpgradeResourceState(ctx, newState, req, res)
}

// ReadResource is the request Terraform sends when it wants to get the latest
// state for the resource.
func (r *{{.Struct}}) ReadResource(ctx context.Context, req tfprotov6.ReadResourceRequest, res *tfprotov6.ReadResourceResponse) {
	newState := new{{.StateCap}}()

	// TODO: the transportUtil only marshals and unmarshals to add default
	// fields. If you need to do more than that you'll need to write a custom
	// read function.
	transportUtil.ReadResource(ctx, newState, req, res)
}

// ImportResourceState is the request Terraform sends when it wants the provider
// to import one or more resources specified by an ID.
//
// Importing a file doesn't make a lot of sense but we have to support the
// function regardless. As our only interface is a string ID, supporting this
// without provider level transport configuration would be absurdly difficult.
// Until then this will simply be a no-op. If/When we implement that behavior
// we could probably create use an identier that combines the source and
// destination to import a file.
func (r *{{.Struct}}) ImportResourceState(ctx context.Context, req tfprotov6.ImportResourceStateRequest, res *tfprotov6.ImportResourceStateResponse) {
	newState := new{{.StateCap}}()

	// TODO: We don't support importing resources but we still need to implement
	// the method. The helper function does that for you.
	transportUtil.ImportResourceState(ctx, newState, req, res)
}

// PlanResourceChange is the request Terraform sends when it is generating a plan
// for the resource and wants the provider's input on what the planned state should be.
func (r *{{.Struct}}) PlanResourceChange(ctx context.Context, req tfprotov6.PlanResourceChangeRequest, res *tfprotov6.PlanResourceChangeResponse) {
	priorState := new{{.StateCap}}()
	proposedState := new{{.StateCap}}()

	// TODO: it is commonly required to unmarshal the PriorState and ProposedState
	// in the request, unmarshal the private transport configuration, build
	// a combined transport with the provider level configuration and resource
	// transport, and validate the proposed state is valid. This function does
	// all of that and returns a combined transport with all provider, resource,
	// and private data loaded, as well as a response with an errors encountered
	// represented as diagnostics. Most of the time you will not need to write
	// your own version of this, but beware.
	transport := transportUtil.PlanUnmarshalVerifyAndBuildTransport(ctx, priorState, proposedState, r, req, res)
	if hasErrors(res.Diagnostics) {
		return
	}

	// TODO: Update the proposedState if necessary. Make sure nothing in the proposed
	// state requires replacing.

	// TODO: Set any computed attributes that you determine during apply to Unknown
	if _, ok := priorState.ID.Get(); !ok {
		proposedState.ID.Unknown = true
	}

	// TODO: After you've updated the proposedState and any RequiresReplace,
	// you need to marshal the transport, transport private, and proposed state,
	// into the the planned state and return a response. This function does just
	// that.
	transportUtil.PlanMarshalPlannedState(ctx, res, proposedState, transport)
}

// ApplyResourceChange is the request Terraform sends when it needs to apply a
// planned set of changes to the resource.
func (r *{{.Struct}}) ApplyResourceChange(ctx context.Context, req tfprotov6.ApplyResourceChangeRequest, res *tfprotov6.ApplyResourceChangeResponse) {
	priorState := new{{.StateCap}}()
	plannedState := new{{.StateCap}}()

	// TODO: When applying you need to compare the prior state with the newly
	// planned state. To do so you need to unmarshal them into a valid
	// state representation. This function does that.
	transportUtil.ApplyUnmarshalState(ctx, priorState, plannedState, req, res)
	if hasErrors(res.Diagnostics) {
		return
	}

	// TODO: Delete
	// Check if the planned state attributes are blank. If they are then you
	// should delete the resource.
	/*
		if _, ok := plannedState.Something.Get(); !ok {
            // Delete the resource
            newState, err := marshalDelete(plannedState)
            if err != nil {
                res.Diagnostics = append(res.Diagnostics, errToDiagnostic(err))
            } else {
                res.NewState = newState
            }
            return
		}
	*/

	// TODO: After you've determined that you aren't deleting the resource you'll
	// want to validate the proposed state and build a transport with the resource
	// transport, transport private, and provider transport configuration. This
	/// function does that for you. In the event of an error it returns a response
	// that has the Diagnostics added for you.
	transport := transportUtil.ApplyValidatePlannedAndBuildTransport(ctx, plannedState, r, res)
	if hasErrors(res.Diagnostics) {
		return
	}

	// TODO: Get the planned state's ID
	plannedID := "something"
	plannedState.ID.Set(plannedID)

	ssh, err := transport.Client(ctx)
	if err != nil {
		res.Diagnostics = append(res.Diagnostics, errToDiagnostic(err))
		return res, err
	}
	defer ssh.Close() //nolint: staticcheck

	// If our priorState ID is blank then we're creating the resource
	if priorID, ok := priorState.ID.Get(); !ok  {
		// TODO: create the resource with the ssh client
	} else {
		plannedID, ok := plannedState.ID.Get()
		if !ok || (priorID != plannedID) {
			// TODO: update the resource with the ssh client
		}
	}

	// TODO: After you've performed your work you'll need to save marshal you
	// plannedState and transport configuration and return a response. This
	// function does that for you.
	transportUtil.ApplyMarshalNewState(ctx, res, plannedState, transport)
}

// Schema is the file states Terraform schema.
func (s *{{.State}}) Schema() *tfprotov6.Schema {
	return &tfprotov6.Schema{
		Version: 1,
		Block: &tfprotov6.SchemaBlock{
			Attributes: []*tfprotov6.SchemaAttribute{
				// TODO: Add all state attributes
				{
					Name:     "id",
					Type:     tftypes.String,
					Computed: true,
				},
				s.Transport.SchemaAttributeTransport(),
			},
		},
	}
}

// Validate validates the configuration. This will validate the source file
// exists and that the transport configuration is valid.
func (s *{{.State}}) Validate(ctx context.Context) error {
	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
	}

	// TODO: Validate each state attribute
	/*
		if s.Attribute == "" {
			return newErrWithDiagnostics("invalid configuration", "you must provide the attribute", "attribute")
		}
	*/

	return nil
}

// FromTerraform5Value is a callback to unmarshal from the tftypes.Vault with As().
func (s *{{.State}}) FromTerraform5Value(val tftypes.Value) error {
	// TODO: Add each state attribute
	vals, err := mapAttributesTo(val, map[string]interface{}{
		"id": s.ID,
	})
	if err != nil {
		return err
	}

	if !vals["transport"].IsKnown() {
		return nil
	}

	return s.Transport.FromTerraform5Value(vals["transport"])
}

// Terraform5Type is the file state tftypes.Type.
func (s *{{.State}}) Terraform5Type() tftypes.Type {
	// TODO: Add each state attribute
	return tftypes.Object{AttributeTypes: map[string]tftypes.Type{
		"id":        s.ID.TFType(),
		"transport": s.Transport.Terraform5Type(),
	}}
}

// Terraform5Type is the file state tftypes.Value.
func (s *{{.State}}) Terraform5Value() tftypes.Value {
	// TODO: Add each state attribute
	return tftypes.NewValue(s.Terraform5Type(), map[string]tftypes.Value{
		"id":        s.ID.TFValue(),
		"transport": s.Transport.Terraform5Value(),
	})
}

// EmbeddedTransport returns a pointer the resources embedded transport.
func (s *{{.State}}) EmbeddedTransport() *embeddedTransportV1 {
	return s.Transport
}
