---
name: test enos-provider from hashicorp-qti/enos

on:
  workflow_dispatch:
    inputs:
      enos_provider_version:
        required: true
        type: string
  workflow_call:
    inputs:
      enos_provider_version:
        required: true
        type: string

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  scenario-kind:
    name: enos scenario run kind
    runs-on: ubuntu-latest
    env:
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - run: enos scenario run kind use:enos --timeout 60m0s
      - if: ${{ always() }}
        run: enos scenario destroy kind use:enos --timeout 60m0s
      - if: ${{ always() }}
        name: remove enos runtime directories
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  scenario-vault:
    name: enos scenario run vault
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    strategy:
      matrix:
        filter:
          - arch:amd64 distro:ubuntu edition:oss version:1.13.2 backend:raft use:enos unseal_method:awskms
          - arch:arm64 distro:ubuntu edition:ent version:1.12.6 backend:consul use:enos unseal_method:shamir
          - arch:amd64 distro:rhel edition:ent version:1.11.10 backend:consul use:enos unseal_method:shamir
          - arch:arm64 distro:rhel edition:oss version:1.8.12 backend:raft use:enos unseal_method:awskms
      fail-fast: false
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: set up support files
        run: |
          mkdir -p ./support
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./support/enos-ci-ssh-key.pem
          echo "${{ secrets.VAULT_LICENSE }}" > ./support/vault.hclic
          chmod 600 ./support/enos-ci-ssh-key.pem
          chmod 600 ./support/vault.hclic
      - run: enos scenario run vault ${{ matrix.filter }} --timeout 60m0s
      - if: ${{ always() }}
        run: enos scenario destroy vault ${{ matrix.filter }} --timeout 60m0s
      - if: ${{ always() }}
        name: remove enos runtime directories
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  scenario-vault-k8s:
    name: enos scenario run vault-k8s
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    strategy:
      matrix:
        filter:
          - edition:ent use:enos
          - edition:oss use:enos
      fail-fast: false
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: set up support files
        run: |
          mkdir -p ./support
          echo "${{ secrets.VAULT_LICENSE }}" > ./support/vault.hclic
          chmod 600 ./support/vault.hclic
      - run: enos scenario run vault_k8s ${{ matrix.filter }} --timeout 60m0s
      - if: ${{ always() }}
        run: enos scenario destroy vault_k8s ${{ matrix.filter }} --timeout 60m0s
      - if: ${{ always() }}
        name: remove enos runtime directories
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  completed-successfully:
    if: |
        always() && (cancelled() ||
        contains(needs.*.result, 'cancelled') ||
        contains(needs.*.result, 'failure'))
    runs-on: ubuntu-latest
    needs:
      - scenario-failure-handlers
      - scenario-kind
      - scenario-vault
      - scenario-vault-k8s
    steps:
      - run: |
          echo "Some of the required build and test workflows have failed!"
          exit 1
