---
name: Test Current Release

on:
  # Allow this pipeline to be triggered manually from GH Actions menu
  workflow_dispatch:
  workflow_call:

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  test-current-release:
    name: "Install and Test Current Artifact"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - name: Assume service user role via Doormat
        uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Setup Vault Enterprise License
        id: license
        run: echo "${{ secrets.VAULT_LICENSE }}" > /tmp/vault.hclic
      - name: Setup mirror
        id: mirror
        run: cat ./cd-tests/mirror.hcl >> ${HOME}/.terraformrc
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./cd-tests/enos-ci-ssh-key.pem
          chmod 600 ./cd-tests/enos-ci-ssh-key.pem
      - name: "Update Provider Version"
        run: |
          export ENOS_VERSION=$(cat ../VERSION)
          sed "s/ENOS_VER/$ENOS_VERSION/g" main.tf > main.tf.upt
          mv main.tf.upt main.tf
        working-directory: ./cd-tests
      - name: "Terraform Plan Test for Provider"
        # validate example terraform that utilizes the provider.
        run: |
          terraform init -backend-config=backend.hcl
          terraform plan -no-color
        working-directory: ./cd-tests
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        continue-on-error: true
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./cd-tests
      - name: Terraform Apply Retry
        # Retry apply if it times out on Route table association
        id: retry_apply
        if: steps.apply.outcome == 'failure'
        run: |
          terraform plan -no-color
          terraform apply -auto-approve
        working-directory: ./cd-tests
      - name: Terraform Destroy
        id: destroy
        if: ${{ always() }}
        run: terraform destroy -auto-approve
        working-directory: ./cd-tests

# TODO: Enable Slack notification for failed workflow
