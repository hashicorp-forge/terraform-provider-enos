---
name: Validate

on:
  pull_request:
    branches:
      - main

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  go-lint:
    name: "Go lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run -v -c .golangci.yml --out-format=github-actions --timeout=5m0s

  enos-fmt:
    name: "Enos Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Assume service user role via Doormat
        uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Setup Enos
        uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Validate Enos Format
        run: enos fmt -cd
        working-directory: ./enoscli-tests

  unit:
    name: "Unit Tests and Formatting"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Build assets
        run: 'sudo apt-get install -y upx-ucl && make flight-control-build'
      - name: Test code
        run: make test
      - name: Check formatting
        run: |
          go install mvdan.cc/gofumpt@latest
          make fmt

  build-and-terraform:
    name: "Build and Test Terraform"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: "Build code & Test core example"
        # build the provider, install as terraform plugin, and validate example
        # terraform that utilizes the provider.
        run: make test-tf  # runs build + install make targets
        # TODO:
        # - name: Upload artifacts to actions workflow
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: ${{ github.event.repository.name }}-artifacts
        #     path: |
        #       ./bin/
      - name: "Terraform Test Artifactory Example"
        # validate example terraform that utilizes the provider.
        run: |
          terraform -chdir=examples/artifactory init
          terraform -chdir=examples/artifactory fmt -check -recursive
          terraform -chdir=examples/artifactory validate

  remotehost:
    name: "Setup Remotehost"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Assume service user role via Doormat
        uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./ci-tests
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./ci-tests/enos-ci-ssh-key.pem
          chmod 600 ./ci-tests/enos-ci-ssh-key.pem
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.hcl
        working-directory: ./ci-tests
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./ci-tests
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve
          terraform output instance_public_ips | tr -d \" > ../host-ipall.txt
          cat ../host-ipall.txt | grep -v instance_public_ips > ../host-ip.txt
        working-directory: ./ci-tests
      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
      # We need to upload the host-ip.txt created in apply
      # so we can use it in acceptance environment
      - name: Upload Host IP
        uses: actions/upload-artifact@v2
        with:
          name: hostip
          path: host-ip.txt
          retention-days: 1

  acceptance:
    name: "Acceptance Tests"
    runs-on: ubuntu-latest
    needs: remotehost
    env:
      ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
      ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
      ARTIFACTORY_PRODUCT_VERSION: "1.7.0"
      ARTIFACTORY_REVISION: "f45845666b4e552bfc8ca775834a3ef6fc097fe0"
      ENOS_TRANSPORT_USER: "ubuntu"
      ENOS_TRANSPORT_PRIVATE_KEY_PATH: "./enos-ci-ssh-key.pem"
    steps:
      - name: Assume service user role via Doormat
        uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/plugin/enos-ci-ssh-key.pem
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/transport/ssh/enos-ci-ssh-key.pem
          chmod 600 ./internal/plugin/enos-ci-ssh-key.pem
          chmod 600 ./internal/transport/ssh/enos-ci-ssh-key.pem
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Build assets
        run: 'sudo apt-get install -y upx-ucl && make flight-control-build'
      # Download host-ip.txt created in Setup Remotehost
      # and export it as ENOS_TRANSPORT_HOST after removing the debug lines
      - name: Download Host IP from remotehost
        uses: actions/download-artifact@v2
        with:
          name: hostip
      - name: Acceptance Tests
        run: |
          export ENOS_TRANSPORT_HOST="$(cat host-ip.txt|sed '/^::/d')"
          echo "ENOS_TRANSPORT_HOST is $ENOS_TRANSPORT_HOST"
          echo "Set Enos Environment Variables $(env |grep ENOS)"
          make test-acc

  deleteremotehost:
    name: "Delete Remotehost"
    if: always()
    needs: acceptance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Assume service user role via Doormat
        uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./ci-tests/enos-ci-ssh-key.pem
          chmod 600 ./ci-tests/enos-ci-ssh-key.pem
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.hcl
        working-directory: ./ci-tests
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: ./ci-tests

# TODO:
# Add security scan
