---
name: test

on:
  pull_request:

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      # Build all provider targets here to ensure they all compile
      - uses: ./.github/actions/build-provider
      - run: ls -al ./dist

  go:
    name: go test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/actions/build-flight-control
      - run: make test-race-detector

  go-acceptance:
    name: ACC=1 go test
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/actions/build-flight-control
      - uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Create up acceptance target host
        working-directory: enos/modules/go-acceptance-test-target
        run: |
          terraform init
          terraform plan -no-color
          terraform apply -auto-approve
          HOST_IP=$(terraform output instance_public_ip | tr -d \" | tr -d "\n")
          echo "host_ip=$HOST_IP" >> $GITHUB_ENV
      - name: Configure ssh keys
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/plugin/enos-ci-ssh-key.pem
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/transport/ssh/enos-ci-ssh-key.pem
          chmod 600 ./internal/plugin/enos-ci-ssh-key.pem
          chmod 600 ./internal/transport/ssh/enos-ci-ssh-key.pem
      - run: make test-acc
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
          ARTIFACTORY_PRODUCT_VERSION: 1.7.0
          ARTIFACTORY_REVISION: f45845666b4e552bfc8ca775834a3ef6fc097fe0
          ENOS_TRANSPORT_USER: ubuntu
          ENOS_TRANSPORT_PRIVATE_KEY_PATH: ./enos-ci-ssh-key.pem
          ENOS_TRANSPORT_HOST: ${{ env.host_ip }}
      - run: terraform destroy -auto-approve
        if: always()
        working-directory: enos/modules/go-acceptance-test-target

  validate-examples:
    name: terraform validate examples
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - uses: hashicorp/setup-terraform@v2
      - name: Run terraform --chdir=examples/* validate
        run: |
          terraform -chdir=examples/core init
          terraform -chdir=examples/core fmt -check -recursive
          terraform -chdir=examples/core validate
          terraform -chdir=examples/artifactory init
          terraform -chdir=examples/artifactory fmt -check -recursive
          terraform -chdir=examples/artifactory validate

  scenario-failure-handlers:
    name: enos scenario run failure_handlers
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Set up support files
        run: |
          mkdir -p ./support
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./support/enos-ci-ssh-key.pem
          echo "${{ secrets.VAULT_LICENSE }}" > ./support/vault.hclic
          chmod 600 ./support/enos-ci-ssh-key.pem
          chmod 600 ./support/vault.hclic
      - uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - run: enos scenario launch failure_handlers use:dev --timeout 60m0s
      - name: Trigger scenario failure
        id: run_remote_exec
        continue-on-error: true
        env:
          ENOS_VAR_run_failure_handler_tests: true
        run: enos scenario run failure_handlers use:dev --timeout 60m0s
      - if: steps.run_remote_exec.outcome == 'failure'
        name: Verify debug log existence
        id: test_logs_exist
        run: |
          log_file_count=$(ls ${{ env.ENOS_DEBUG_DATA_ROOT_DIR }}/{consul,vault}* | wc -l)
          test $log_file_count -eq 2
      - if: ${{ always() }}
        run: enos scenario destroy failure_handlers use:dev --timeout 60m0s
      - if: ${{ always() }}
        name: Remove enos runtime directories
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  scenario-kind:
    name: enos scenario run kind
    runs-on: ubuntu-latest
    env:
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - run: enos scenario run kind use:dev --timeout 60m0s
      - if: ${{ always() }}
        run: enos scenario destroy kind use:dev --timeout 60m0s
      - if: ${{ always() }}
        name: Remove enos runtime directories
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  scenario-vault:
    name: "enos scenario run vault arch:${{ matrix.arch }} backend:${{ matrix.backend }} consul_edition:${{ matrix.consul_edition }} consul_version:${{ matrix.consul_version }} distro:${{ matrix.distro }} edition:${{ matrix.edition }} use:${{ matrix.use }} unseal_method:${{ matrix.unseal_method }} version:${{ matrix.version }}"
    uses: ./.github/workflows/run_scenario_vault_ssh.yml
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            backend: raft
            distro: ubuntu
            edition: oss
            use: dev
            unseal_method: awskms
            version: 1.8.12
          - arch: arm64
            backend: consul
            consul_edition: oss
            consul_version: 1.14.7
            distro: ubuntu
            edition: oss
            use: dev
            unseal_method: shamir
            version: 1.11.10
          - arch: amd64
            backend: consul
            consul_edition: ent
            consul_version: 1.15.3
            distro: rhel
            edition: ent
            use: dev
            unseal_method: awskms
            version: 1.12.6
          - arch: arm64
            backend: raft
            distro: rhel
            edition: oss
            use: dev
            unseal_method: shamir
            version: 1.12.6
    with:
      arch: ${{ matrix.arch }}
      backend: ${{ matrix.backend }}
      consul_edition: ${{ matrix.consul_edition }}
      consul_version: ${{ matrix.consul_version }}
      distro: ${{ matrix.distro }}
      edition: ${{ matrix.edition }}
      use: ${{ matrix.use }}
      unseal_method: ${{ matrix.unseal_method }}
      version: ${{ matrix.version }}

  scenario-vault-k8s:
    name: enos scenario run vault_k8s
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    strategy:
      matrix:
        filter:
          - edition:ent use:dev
          - edition:oss use:dev
      fail-fast: false
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Set up support files
        run: |
          mkdir -p ./support
          echo "${{ secrets.VAULT_LICENSE }}" > ./support/vault.hclic
          chmod 600 ./support/vault.hclic
      - uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - run: enos scenario run vault_k8s ${{ matrix.filter }} --timeout 60m0s
      - run: enos scenario destroy vault_k8s ${{ matrix.filter }} --timeout 60m0s
        if: ${{ always() }}
      - name: Remove enos runtime directories
        if: ${{ always() }}
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  static-analysis:
    name: static analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: ./.github/actions/build-flight-control
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Run make fmt-check
        run: |
          go install mvdan.cc/gofumpt@latest
          make fmt-check
      - name: Run make lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          LINT_OUT_FORMAT=github-actions make lint

  completed-successfully:
    if: |
        always() && (cancelled() ||
        contains(needs.*.result, 'cancelled') ||
        contains(needs.*.result, 'failure'))
    runs-on: ubuntu-latest
    needs:
      - build
      - go
      - go-acceptance
      - validate-examples
      - scenario-failure-handlers
      - scenario-kind
      - scenario-vault
      - scenario-vault-k8s
      - static-analysis
    steps:
      - run: |
          echo "one or more required test workflows did not complete successfully"
          exit 1
