---
name: test

on:
  pull_request:

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      # Build all provider targets here to ensure they all compile
      - uses: ./.github/actions/build-provider
      - run: ls -al ./dist

  go:
    name: "Go tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: ./.github/actions/build-flight-control
      - run: make test-race-detector

  go-acceptance:
    name: "Go acceptance tests"
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: ./.github/actions/build-flight-control
      - uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Set up Remote Host
        id: setup-remote-host
        working-directory: ./ci-tests
        run: |
          terraform init
          terraform plan -no-color
          terraform apply -auto-approve
          HOST_IP=$(terraform output instance_public_ip | tr -d \" | tr -d "\n")
          echo "host_ip=$HOST_IP" >> $GITHUB_ENV
      - name: Set up Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/plugin/enos-ci-ssh-key.pem
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./internal/transport/ssh/enos-ci-ssh-key.pem
          chmod 600 ./internal/plugin/enos-ci-ssh-key.pem
          chmod 600 ./internal/transport/ssh/enos-ci-ssh-key.pem
      - name: Run Acceptance Tests
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
          ARTIFACTORY_PRODUCT_VERSION: "1.7.0"
          ARTIFACTORY_REVISION: "f45845666b4e552bfc8ca775834a3ef6fc097fe0"
          ENOS_TRANSPORT_USER: "ubuntu"
          ENOS_TRANSPORT_PRIVATE_KEY_PATH: "./enos-ci-ssh-key.pem"
          ENOS_TRANSPORT_HOST: ${{ env.host_ip }}
        run: make test-acc
      - name: Terraform Destroy
        if: always()
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: ./ci-tests

  terraform-smoke:
    name: "Terraform Smoke tests"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: ./.github/actions/build-provider
        with:
          target: "linux/amd64"
      - uses: hashicorp/setup-terraform@v2
      - name: "Smoke test provider with Terraform"
        run: |
          make install test-tf
          terraform -chdir=examples/artifactory init
          terraform -chdir=examples/artifactory fmt -check -recursive
          terraform -chdir=examples/artifactory validate

  scenario-failure-handlers:
    name: "Enos failure_handlers scenario"
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: enos
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: hashicorp/doormat-action@main
        with:
          # This role, its associated IAM policy, the allowed Github workflow
          # event types and their associated qualifiers are managed via
          # Terraform in the hashicorp/enos-ci repository. If you wish to allow
          # AWS credentials for different Github event types, workflows or
          # branches you'll need to update the role there.
          aws-role-arn: arn:aws:iam::147451547303:role/enos-provider
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          mkdir -p ./support
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./support/enos-ci-ssh-key.pem
          chmod 600 ./support/enos-ci-ssh-key.pem
      - uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - name: "Run Enos Scenario"
        id: launch
        continue-on-error: true
        run: enos scenario launch failure_handlers --timeout 60m0s
      - name: Retry Enos scenario if necessary
        id: launch_retry
        if: steps.launch.outcome == 'failure'
        run: enos scenario launch failure_handlers --timeout 60m0s
      - name: Run Failing Remote Exec
        id: run_remote_exec
        continue-on-error: true
        env:
          ENOS_VAR_run_failure_handler_tests: true
        run: enos scenario run failure_handlers --timeout 60m0s
      - name: Verify Log Files Exist
        id: test_logs_exist
        if: steps.run_remote_exec.outcome == 'failure'
        run: |
          log_file_count=$(ls ${{ env.ENOS_DEBUG_DATA_ROOT_DIR }}/{consul,vault}* | wc -l)
          test $log_file_count -eq 2
      - name: Ensure scenario has been destroyed
        if: ${{ always() }}
        run: enos scenario destroy failure_handlers --timeout 60m0s
      - name: Clean up Enos runtime directories
        if: ${{ always() }}
        run: |
          rm -rf /tmp/enos*
          rm -rf ./support
          rm -rf ./.enos
          rm -rf $HOME/.terraform.d

  static-analysis:
    name: "Static analysis"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: ./.github/actions/build-flight-control
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Check formatting
        run: |
          go install mvdan.cc/gofumpt@latest
          make fmt-check
      - name: Run Linters
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          LINT_OUT_FORMAT=github-actions make lint
