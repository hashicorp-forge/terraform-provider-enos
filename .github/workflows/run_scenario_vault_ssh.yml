---
name: run-scenario-vault-ssh

on:
  workflow_dispatch:
    inputs:
      arch:
        required: true
        type: string
      backend:
        required: true
        type: string
      consul_edition:
        required: false
        type: string
        default: ce
      consul_version:
        required: false
        type: string
        default: 1.15.3
      distro:
        required: true
        type: string
      edition:
        required: true
        type: string
      enos_provider_version:
        type: string
      use:
        required: true
        type: string
      unseal_method:
        required: true
        type: string
      version:
        required: true
        type: string
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
      backend:
        required: true
        type: string
      consul_edition:
        required: false
        type: string
        default: ce
      consul_version:
        required: false
        type: string
        default: 1.15.3
      distro:
        required: true
        type: string
      edition:
        required: true
        type: string
      enos_provider_version:
        type: string
      use:
        required: true
        type: string
      unseal_method:
        required: true
        type: string
      version:
        required: true
        type: string

# These permissions are necessary for the doormat-action to get the OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  scenario-vault:
    name: "enos scenario run vault arch:${{ inputs.arch }} backend:${{ inputs.backend }} consul_edition:${{ inputs.consul_edition }} consul_version:${{ inputs.consul_version }} distro:${{ inputs.distro }} edition:${{ inputs.edition }} use:${{ inputs.use }} unseal_method:${{ inputs.unseal_method }} version:${{ inputs.version }}"
    runs-on: ubuntu-latest
    env:
      ENOS_DEBUG_DATA_ROOT_DIR: /tmp/enos/logs
      ENOS_VAR_enosdev_provider_version: ${{ inputs.enos_provider_version }}
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      ENOS_VAR_consul_release: '{edition = "${{ inputs.consul_edition }}", version = "${{ inputs.consul_version }}"}'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          # The github actions service user creds for this account managed in hashicorp/enos-ci
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
      - uses: hashicorp/setup-terraform@v2
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Set up support files
        run: |
          mkdir -p enos/support
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > enos/support/enos-ci-ssh-key.pem
          echo "${{ secrets.VAULT_LICENSE }}" > enos/support/vault.hclic
          echo "${{ secrets.CONSUL_LICENSE }}" > enos/support/consul.hclic
          chmod 600 enos/support/enos-ci-ssh-key.pem
          chmod 600 enos/support/vault.hclic
          chmod 600 enos/support/consul.hclic
      - if: ${{ inputs.use == 'dev' }}
        uses: ./.github/actions/build-provider
        with:
          target: linux/amd64
      - run: enos scenario run vault arch:${{ inputs.arch }} backend:${{ inputs.backend}} distro:${{ inputs.distro }} edition:${{ inputs.edition }} unseal_method:${{ inputs.unseal_method }} use:${{ inputs.use }} version:${{ inputs.version }} --timeout 60m0s
        working-directory: enos
      - if: ${{ always() }}
        run: enos scenario destroy vault arch:${{ inputs.arch }} backend:${{ inputs.backend}} distro:${{ inputs.distro }} edition:${{ inputs.edition }} unseal_method:${{ inputs.unseal_method }} use:${{ inputs.use }} version:${{ inputs.version }} --timeout 60m0s
        working-directory: enos
      - name: Remove enos runtime directories
        if: ${{ always() }}
        run: |
          rm -rf /tmp/enos*
          rm -rf enos/support
          rm -rf enos/.enos
          rm -rf $HOME/.terraform.d
