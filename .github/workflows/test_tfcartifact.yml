---
name: Test TFC Artifact

on:
  workflow_call:
    inputs:
      enos-provider-name:
        required: true
        type: string
      enos-provider-version:
        required: true
        type: string

jobs:
  test-tfc-artifact:
    name: "Install and Test TFC Artifact"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::147451547303:role/github_actions-Enos-Provider
          role-skip-session-tagging: true
          role-duration-seconds: 3600
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # the terraform wrapper will break terraform execution in enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Setup Enos
        uses: hashicorp/action-setup-enos@v1
        with:
          github-token:
            ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Setup Vault Enterprise License
        id: license
        run: echo "${{ secrets.VAULT_LICENSE }}" > ./enoscli-tests/vault.hclic
      - name: Setup Enos SSH Keys
        id: sshkey
        run: |
          echo "${{ secrets.ENOS_CI_SSH_KEYPAIR }}" > ./enoscli-tests/enos-ci-ssh-keypair.pem
          chmod 600 ./enoscli-tests/enos-ci-ssh-keypair.pem
      - name: "Update Provider Name for Backend module"
        run: |
          export ENOS_PROVIDER_NAME={{ inputs.enos_provider_name }}
          sed "s/ENOS_PROVIDER_NAME/$ENOS_PROVIDER_NAME/g" main.tf > main.tf.upt
          mv main.tf.upt main.tf
        working-directory: cd ./enoscli-tests/modules/backend_consul
      - name: "Update Provider Name for Vault module"
        run: |
          export ENOS_PROVIDER_NAME=${{ inputs.enos_provider_name }}
          sed "s/ENOS_PROVIDER_NAME/$ENOS_PROVIDER_NAME/g" main.tf > main.tf.upt
          mv main.tf.upt main.tf
        working-directory: ./enoscli-tests/modules/vault_cluster
      - name: "Update Provider Version Backend module"
        run: |
          export ENOS_VERSION={{ inputs.enos_provider_version }}
          sed "s/ENOS_VER/$ENOS_VERSION/g" main.tf > main.tf.upt
          mv main.tf.upt main.tf
        working-directory: ./enoscli-tests/modules/backend_consul
      - name: "Update Provider Version Vault module"
        run: |
          export ENOS_VERSION=${{ inputs.enos_provider_version }}
          sed "s/ENOS_VER/$ENOS_VERSION/g" main.tf > main.tf.upt
          mv main.tf.upt main.tf
        working-directory: ./enoscli-tests/modules/vault_cluster
      - name: "Enos Version"
        run: enos version
      - name: "Run Enos Scenario List"
        id: enoslist
        run: enos scenario list
        working-directory: ./enoscli-tests
      - name: "Run Enos Scenario Run with Consul backend"
        id: enosrun
        env:
          ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
          ENOS_VAR_enos_provider_name: ${{ inputs.enos_provider_name }}
          ENOS_VAR_enos_provider_version: ${{ inputs.enos_provider_version }}
        run: enos scenario run vault  arch:amd64  backend:consul  distro:ubuntu  edition:ent
        working-directory: ./enoscli-tests
      - name: "Run Enos Scenario destroy"
        id: enosdestroy
        if: ${{ always() }}
        env:
          ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
          ENOS_VAR_enos_provider_name: ${{ inputs.enos_provider_name }}
          ENOS_VAR_enos_provider_version: ${{ inputs.enos_provider_version }}
        run: enos scenario destroy vault  arch:amd64  backend:consul  distro:ubuntu  edition:ent
        working-directory: ./enoscli-tests
      - name: K8S tests
        id: enoscli-k8s
        env:
          TFC_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ENOS_RELEASE_NAME: ${{ inputs.enos_provider_name }}
        run: make test-k8s
